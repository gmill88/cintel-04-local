[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shiny import render, reactive\nfrom shinywidgets import render_plotly\nimport pandas as pd\nimport seaborn as sns\nfrom palmerpenguins import load_penguins\n\n# load penguins dataset\npenguins_df = load_penguins()\n\nui.page_opts(title=\"Miller Penguin Data\")\n\n# add ui sidebar\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\") # add second level header to sidebar\n    \n    # Dropdown to select attribute \n    ui.input_selectize(\"selected_attribute\", \"Body Measurement in Millimeters\", \n                       [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]) \n    \n    # input for number of bins\n    ui.input_numeric(\"plotly_bin_count\", \"Bin Count\", 25)\n    \n    # create slider\n    ui.input_slider(\"seaborn_bin_count\", \"Bin Count\", 3, 100, 25)\n\n    # Create a checkbox group input to filter the species\n    ui.input_checkbox_group(\"species_list\", \"Selected species\", \n                            [\"Adelie\", \"Chinstrap\", \"Gentoo\"], selected=[\"Adelie\", \"Chinstrap\"], inline=True)\n\n        # Create a checkbox group input to filter the island\n    ui.input_checkbox_group(\"island_list\", \"Selected island\", \n                            [\"Torgersen\", \"Biscoe\", \"Dream\"], selected=[\"Torgersen\", \"Biscoe\", \"Dream\"], inline=True)\n    \n    # Add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Add a hyperlink to the sidebar\n    ui.a(\"Miller Repo\", href=\"https://github.com/gmill88/cintel-03-reactive\", target=\"_blank\")\n    \n    # display data grid and data table\nwith ui.layout_columns():        \n    with ui.card(full_screen=True):\n        ui.card_header(\"Penguins Data Table\")\n        @render.data_frame\n        def render_penguins_table():\n            return filtered_data()\n        \nwith ui.layout_columns(): \n    with ui.card(full_screen=True):\n        ui.card_header(\"Penguins Data Grid\")\n        @render.data_frame\n        def penguins_data():\n            return render.DataGrid(data=filtered_data(), row_selection_mode=\"multiple\") \n\n# Plotly histogram showing all species\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Histogram\")\n    @render_plotly  \n    def plot_plt():  \n        return px.histogram(filtered_data(),\n            x=input.selected_attribute(),\n            nbins=input.plotly_bin_count(),\n            color=\"species\",\n            title=\"Penguin bill depth\",\n            labels={\"selected_attribute\": \"Selected Attribute\", \"count\": \"Count\"})\n        \n# Seaborn histogram showing all species\nwith ui.card(full_screen=True):\n    ui.card_header(\"Seaborn Histogram\")\n\n    @render.plot(alt=\"Seaborn Histogram\")\n    def seaborn_histogram():\n        histplot = sns.histplot(filtered_data(), x=input.selected_attribute(), bins=input.seaborn_bin_count())\n        histplot.set_title(\"Penguin Data\")\n        histplot.set_xlabel(\"Selected Attribute\")\n        histplot.set_ylabel(\"Count\")\n        return histplot\n        \n# Plotly Scatterplot showing all species\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Scatterplot\")\n\n    @render_plotly\n    def plotly_scatterplot():\n        return px.scatter(filtered_data(),\n            x=\"bill_depth_mm\",\n            y=\"flipper_length_mm\",\n            color=\"species\",\n            hover_name=\"island\",\n            title=\"Scatterplot of Bill Length vs. Body Mass by Species\",\n            labels={\n                \"bill_depth_mm\": \"Bill Depth (mm)\",\n                \"flipper_length_mm\": \"Flipper Length (mm)\"})\n        \n# 3d scatterplot showing all species\nwith ui.card(full_screen=True):\n    ui.card_header(\"3D Scatter Plot Penguin Data\")\n\n    @render_plotly\n    def scatter_3d_plot():\n        return px.scatter_3d(\n            filtered_data(),\n            x=\"body_mass_g\",\n            y=\"bill_depth_mm\",\n            z=\"flipper_length_mm\",\n            color=\"species\",\n            hover_name=\"island\",\n            title=\"3D Scatter Plot of Body Mass, Bill Length, and Flipper Length\",\n            labels={\n                \"body_mass_g\": \"Body Mass (g)\",\n                \"bill_depth_mm\": \"Bill Depth (mm)\",\n                \"flipper_length_mm\": \"Flipper Length (mm)\"})\n\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[penguins_df[\"species\"].isin(input.species_list()) & penguins_df[\"island\"].isin(input.island_list())]\n", "type": "text"}]